<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客搭建</title>
      <link href="/2022/05/26/bo-ke-da-jian/"/>
      <url>/2022/05/26/bo-ke-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="一、hexo本地部署和github部署"><a href="#一、hexo本地部署和github部署" class="headerlink" title="一、hexo本地部署和github部署"></a>一、hexo本地部署和github部署</h1><ul><li>过程：<br>参考<a href="https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web">b站程序羊</a></li><li>主要问题：windos系统 hexo d 报错<br>参考弹幕<a href="https://www.bilibili.com/video/BV1Yb411a7ty?share_source=copy_web">b站程序羊</a></li></ul><blockquote><p>win10记得hexo 之前敲<br>git config –global user.email “xxx”<br>git config –global user.name “xxx”</p></blockquote><h1 id="二、yilia主题使用"><a href="#二、yilia主题使用" class="headerlink" title="二、yilia主题使用"></a>二、yilia主题使用</h1><p>​参考<a href="https://www.bilibili.com/video/BV1pt411K7o9?p=5&share_source=copy_web">b站CoolPlayer-函博</a></p><h2 id="（一）解决所有文章无法查看-配置图片"><a href="#（一）解决所有文章无法查看-配置图片" class="headerlink" title="（一）解决所有文章无法查看+配置图片"></a>（一）解决所有文章无法查看+配置图片</h2><p>​参考<a href="https://blog.csdn.net/lynnbest/article/details/79845944">Hexo yilia 主题一揽子使用方案</a></p><h2 id="（二）博客文章书写"><a href="#（二）博客文章书写" class="headerlink" title="（二）博客文章书写"></a>（二）博客文章书写</h2><p>​参考<a href="https://blog.csdn.net/sanallen/article/details/92081911">Markdown文档编写指南</a></p><h2 id="（三）添加背景音乐"><a href="#（三）添加背景音乐" class="headerlink" title="（三）添加背景音乐"></a>（三）添加背景音乐</h2><p>​参考<a href="https://www.jianshu.com/p/f3fe5cb74d32">Hexo博客yilia主题添加背景音乐</a></p><h2 id="（四）点击小红星-看板娘"><a href="#（四）点击小红星-看板娘" class="headerlink" title="（四）点击小红星+看板娘"></a>（四）点击小红星+看板娘</h2><p>​参考<a href="https://www.cnblogs.com/Friends-A/p/11054968.html">Hexo添加Live2D看板娘+模型预览</a></p><h2 id="（五）添加脑图"><a href="#（五）添加脑图" class="headerlink" title="（五）添加脑图"></a>（五）添加脑图</h2><p>​参考<a href="https://hunterx.xyz/use-mindmap-in-hexo.html">在Hexo中使用思维导图</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一阶段考试</title>
      <link href="/2022/05/26/di-yi-jie-duan-kao-shi/"/>
      <url>/2022/05/26/di-yi-jie-duan-kao-shi/</url>
      
        <content type="html"><![CDATA[<ol><li><p>简述解释型语言和编译型语言的区别。</p><pre class="language-python" data-language="python"><code class="language-python">解释型语言：实时翻译，运行一行翻译一行编译型语言：全文翻译，将代码文件翻译后进行存储，运行时直接运行翻译好的零时文件</code></pre></li><li><p>罗列你听说过的编程语言。</p><pre class="language-none"><code class="language-none">python, C, C++, Ruby, Java, PHP, Javascript, Ada</code></pre></li><li><p>简述位和字节的关系？</p><pre class="language-none"><code class="language-none">位(bit):计算机最小表示单位，表示共有多少个0101字节(bety)：计算机最小的存储单位，8bit &#x3D; 1bety</code></pre></li><li><p>简述你理解的 ascii、unicode、utf-8、gbk 编码。</p><pre class="language-none"><code class="language-none">编码就是一个密码本，建立了文字和数字之间的映射关系， ascii、unicode、utf-8、gbk是不同的编码系统  - ascii编码：建立了英文和数字之间的映射关系，取值范围0~255，不支持中文  - gbk 编码：建立了汉字（韩语、日语等亚洲语言）和数字之间的映射关系，一个中文字符由两个字节表示  - unicode 编码：建立了世界上大多数语言与数字的映射关系，向下兼容ascii编码，由于其适宜性广，数据的存储一般使用该编码，但其数据量相对较大，不利于网络传输  - utf-8 编码：本质上是对unicode编码的压缩，规定了对应的unicode码号使用多少字节进行表示，减少了数据量。</code></pre></li><li><p>py2和py3默认解释器编码分别是什么？如何在代码中修改解释器的编码？</p><pre class="language-pyth" data-language="pyth"><code class="language-pyth">- py2的默认解释器编码为ascii- py3的默认解释器编码为utf-8- 默认解释器修改方法  文件写入如下代码： # -*- coding：utf-8 ——*-</code></pre></li><li><p>pass的作用？</p><pre class="language-none"><code class="language-none">起到站位符的作用，当代码不完整时，保证Python语法的完整性</code></pre></li><li><p>is和&#x3D;&#x3D;的区别？</p><pre class="language-python" data-language="python"><code class="language-python">- is:判断内存地址是否相等- &#x3D;&#x3D;:判读取值是否相等示例：a &#x3D; []    b &#x3D; []    print(a &#x3D;&#x3D; b)  # True    print(a is b)  # False</code></pre></li><li><p>列举你了解的Python2和Python3的区别。</p><pre class="language-python" data-language="python"><code class="language-python">1. 默认编码：python2使用ascii，python3使用utf-82. 整型：python2分为长整型和短整型，python3只有整型(长整型)修改：3. 地板除：Python2取整，python3取小数4. python2字典无序，py3.6+字典有序5. 字典的keys()&#x2F;valies()&#x2F;items(): python2列表，python3高仿列表</code></pre></li><li><p>变量名的命名规范有哪些？</p><pre class="language-python" data-language="python"><code class="language-python">三条规范：1. 是能使用字母，下划线和数字的组合2. 不能以数字开头3. 不能使用系统保留关键字两条建议：1. 多个字母使用下划线进行链接2. 全局变量使用大写字母，局部变量使用小写3. 见名之意</code></pre></li><li><p>都有那些值转换为布尔值时为False？</p><pre class="language-none"><code class="language-none">0&#39;&#39;[]()set()&#123;&#125;None</code></pre></li><li><p>简述如下三个变量的区别。</p><pre class="language-python" data-language="python"><code class="language-python">v1 &#x3D; (1)v2 &#x3D; (1,)v3 &#x3D; 1</code></pre><pre class="language-none"><code class="language-none">v1 &#x3D; v3 数据类型：intv2 数据类型：tuple 内部元素 1</code></pre></li><li><p>你所学的数据类型中哪些是可变的类型？</p><pre class="language-none"><code class="language-none">- list- set- dict</code></pre></li><li><p>你所学的数据类型中哪些是可哈希的类型？</p><pre class="language-python" data-language="python"><code class="language-python">- int- str- bool- float- tuple</code></pre></li><li><p>你所学的数据类型（容器）中哪些是有序的</p><pre class="language-none"><code class="language-none">- list- tuple- dict(python3.6+)</code></pre></li><li><p>列举你能记得的如下数据类型的方法（独有功能）。</p><ul><li><p>str</p><pre class="language-none"><code class="language-none">startswith()， endswith(), replace(), upper(), lower(), strip(), split(), isdecimal(), join(), center(), ljust(), rjust()</code></pre></li><li><p>list</p><pre class="language-python" data-language="python"><code class="language-python">增：append(), insert(), extend()删：remove(), pop(), del , claer()改：sort(), reverse()查:index()</code></pre></li><li><p>dict</p><pre class="language-python" data-language="python"><code class="language-python">增：setdefault()删：popitem(), del 改：updat()查：get(), keys(), values(), items() </code></pre></li></ul></li><li><p>请将字符 <code>name = &quot;wupeiqi&quot;</code> 翻转。</p><pre class="language-python" data-language="python"><code class="language-python">name &#x3D; &quot;wupeiqi&quot;new_name &#x3D; name[::-1]</code></pre></li><li><p>进制之间如何进行转换？</p><pre class="language-python" data-language="python"><code class="language-python">- 由十进制(int)转出  - 二进制 bin()  - 八进制 oct()  - 十六进制 hex()- 转为十进制(int)  - 二进制 int(&#39;&#39;, base&#x3D;2)  - 八进制 int(&#39;&#39;, base&#x3D;8)  - 十六进制 int(&#39;&#39;, base&#x3D;16)</code></pre></li><li><p>循环过程中 break和continue的作用是什么？</p><pre class="language-python" data-language="python"><code class="language-python">- break:终止循环，当循环内部代码块遇到break后会立刻停止下方代码执行，并结束循环- continue：跳出本次循环，当循环内部代码块遇到break后会停止下方代码执行，直接开始下次循环</code></pre></li><li><p>看代码写结果</p><pre class="language-python" data-language="python"><code class="language-python">v1 &#x3D; 1 or 9 and 88 or [11,22] and (1,2,3)v2 &#x3D; 1&gt;5 or &quot;alex&quot; and &#123;&quot;K1&quot;:&quot;v1&quot;&#125; or 888print(v1,v2)  #1， &#123;&quot;K1&quot;:&quot;v1&quot;&#125;</code></pre></li><li><p>看代码写结果</p><pre class="language-python" data-language="python"><code class="language-python"> info &#x3D; [      &#123;&#39;k1&#39;:(1),&#39;k2&#39;:&#123;&#39;k9&#39;:&#39;luffy&#39;,&#39;k10&#39;:&#39;武沛齐&#39;&#125;&#125;,      (11,22,33,44),     &#123;199,2,3,4,5&#125;,     True,      [&#39;李杰&#39;,&#39;alex&#39;, &#123; &#39;extra&#39;: (&quot;alex&quot;,[18,20],&#39;eric&#39;) &#125; ]] </code></pre><ul><li><p>利用索引获取 “luffy” </p><pre class="language-python" data-language="python"><code class="language-python">info[0][&#39;k2&#39;][&#39;k9&#39;]</code></pre></li><li><p>利用索引获取 44</p><pre class="language-python" data-language="python"><code class="language-python">info[1][3]</code></pre></li><li><p>删除k10对应的键值对</p><pre class="language-python" data-language="python"><code class="language-python">del info[0][&#39;k2&#39;][&#39;k10&#39;]</code></pre></li><li><p>在 <code>&#123; &#39;extra&#39;: (&quot;alex&quot;,[18,20],&#39;eric&#39;) &#125;</code> 字典中添加一个键值对 <code>&quot;name&quot;:&quot;武沛齐&quot;</code></p><pre class="language-python" data-language="python"><code class="language-python">info[4][2][&#39;name&#39;] &#x3D; &quot;武沛齐&quot;</code></pre></li><li><p>在集合<code>&#123;199,2,3,4,5&#125;</code>中添加一个 “北京”</p><pre class="language-python" data-language="python"><code class="language-python">info[2].add(&#39;北京&#39;)</code></pre></li><li><p>将列表中的True修改为 “真”</p><pre class="language-python" data-language="python"><code class="language-python">info[3] &#x3D; &#39;真&#39;</code></pre></li><li><p>在列表 <code>[18,20]</code>的第0个索引位置插入 666</p><pre class="language-python" data-language="python"><code class="language-python">info[4][2][&#39;extra&#39;][1].insert(0, 666)</code></pre></li></ul></li><li><p>判断下面的代码是否正确？正确的话则写出结果，否则标明错误。</p><pre class="language-python" data-language="python"><code class="language-python">v1 &#x3D; (11,22,33)  # (11,22,33)v2 &#x3D; (11)  # 11v3 &#x3D; &#123;11,2,33&#125;  # &#123;11,2,33&#125;v4 &#x3D; &#123;11,2,(&quot;alex&quot;,&quot;eric&quot;),33&#125;  # &#123;11,2,(&quot;alex&quot;,&quot;eric&quot;),33&#125;v5 &#x3D; &#123;11,2,(&quot;alex&quot;,&#123;&quot;北京&quot;,&quot;上海&quot;&#125;,&quot;eric&quot;),33&#125;  # 集合v5内部子孙中存在不可哈希元素&#123;&quot;北京&quot;,&quot;上海&quot;&#125;</code></pre></li><li><p>看代码写结果</p><pre class="language-python" data-language="python"><code class="language-python">v1 &#x3D; [11,22,33]v2 &#x3D; [11,22,33]v1.append(666)print(v1)  # [11,22,33,66]print(v2)  # [11,22,33]</code></pre></li><li><p>看代码写结果</p><pre class="language-python" data-language="python"><code class="language-python">v1 &#x3D; [11,22,33]v2 &#x3D; v1v1.append(666)print(v1)  # [11,22,33,66]print(v2)  # [11,22,33,66]</code></pre></li><li><p>看代码写结果</p><pre class="language-python" data-language="python"><code class="language-python">v1 &#x3D; [1,2,3,4,5]v2 &#x3D; [v1,v1,v1]  # [[1,2,3,4,5], [1,2,3,4,5], [1,2,3,4,5]]v2[1][0] &#x3D; 111v2[2][0] &#x3D; 222print(v1)  #  v1 &#x3D; [1,2,3,4,5]print(v2)  # [[1,2,3,4,5], [111,2,3,4,5], [222,2,3,4,5]]</code></pre></li><li><p>写代码实现，循环提示用户输入内容（Q或q终止），并将内容用 “_” 连接起来。</p><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件功能为：循环提示用户输入内容（Q或q终止），并将内容用 &quot;_&quot; 连接起来。&#39;&#39;&#39;while True:    user_input &#x3D; input(&#39;please input something,(Q&#x2F;q to quit): &#39;)    if user_input.upper() &#x3D;&#x3D; &#39;Q&#39;:  # 输入Q&#x2F;q退出        break            print(&#39;_&#39;.join(user_input))</code></pre></li><li><p>写代码实现，将IP转换为整数。</p><blockquote><p>如 10.3.9.12 转换规则为：<br>  10            00001010<br>   3             00000011<br>   9             00001001<br>  12            00001100<br>再将以上二进制拼接起来，然后再进行一次翻转。</p><p>最终将翻转之后的二进制转换为整型。</p></blockquote><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件实现功能为，将IP转换为整数。如 10.3.9.12 转换规则为：     10            00001010      3            00000011      9            00001001     12            00001100再将以上二进制拼接起来，然后再进行一次翻转。最终将翻转之后的二进制转换为整型。&#39;&#39;&#39;ip_str &#x3D; &#39;10.3.9.12&#39;ip_list &#x3D; ip_str.split(&#39;.&#39;)  # [&#39;10&#39;, &#39;3&#39;, &#39;9&#39;, &#39;12&#39;]# 1、将ip_list按转换规则进行转换bin_list &#x3D; []for item in ip_list:    bin_ip &#x3D; bin(int(item))  # &#39;0b1010&#39; ...    data &#x3D; bin_ip[2:].zfill(8)  # 00001010 ...    bin_list.append(data)# 2、再将以上二进制拼接起来，然后再进行一次翻转result_reverse &#x3D; &#39;&#39;.join(bin_list)  # 拼接result_bin &#x3D; result_reverse[::-1]  # 翻转# 3、最终将翻转之后的二进制转换为整型result &#x3D; int(result_bin, base&#x3D;2)print(result)</code></pre></li><li><p>写代码实现，车牌的区域划分。</p><pre class="language-python" data-language="python"><code class="language-python">car_list &#x3D; [&#39;鲁A32444&#39;, &#39;沪B12333&#39;, &#39;京B8989M&#39;, &#39;京C49678&#39;, &#39;黑C46555&#39;, &#39;晋B25041&#39;, &#39;沪C34567&#39;]# 根据以上代码获取各省车牌数量，例如：info &#x3D; &#123;&quot;沪&quot;:2,&quot;京&quot;:2 ...&#125;</code></pre><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件实现功能为，根据以上车牌号码获取各省车牌数量。如 car_list &#x3D;[&#39;鲁A32444&#39;, &#39;沪B12333&#39;, &#39;京B8989M&#39;, &#39;京C49678&#39;, &#39;黑C46555&#39;, &#39;晋B25041&#39;, &#39;沪C34567&#39;]输出：info &#x3D; &#123;&quot;沪&quot;:2,&quot;京&quot;:2 ...&#125;&#39;&#39;&#39;car_list &#x3D; [&#39;鲁A32444&#39;, &#39;沪B12333&#39;, &#39;京B8989M&#39;, &#39;京C49678&#39;, &#39;黑C46555&#39;, &#39;晋B25041&#39;, &#39;沪C34567&#39;]info_list &#x3D; &#123;    # &quot;沪&quot;:[沪B12333, 沪C34567] ...&#125;for car in car_list:    location &#x3D; car[0]    info_list[location] &#x3D; []  # &#123;&#39;鲁&#39;: [], &#39;沪&#39;: [], &#39;京&#39;: [], &#39;黑&#39;: [], &#39;晋&#39;: []&#125;for car in car_list:    location &#x3D; car[0]    info_list[location].append(car)  # &#123;&#39;鲁&#39;: [&#39;鲁A32444&#39;], ...&#125;info &#x3D; &#123;&#125;for location in info_list:    info[location] &#x3D; len(info_list[location])  # &#123;&#39;鲁&#39;: 1, &#39;沪&#39;: 2, &#39;京&#39;: 2, &#39;黑&#39;: 1, &#39;晋&#39;: 1&#125;print(info)</code></pre></li><li><p>写代码实现，数据格式化处理。</p><pre class="language-python" data-language="python"><code class="language-python">text &#x3D; &quot;&quot;&quot;id,name,age,phone,job1,alex,22,13651054608,IT 2,wusir,23,13304320533,Tearcher3,老男孩,18,1333235322,IT&quot;&quot;&quot;# 将上述数据处理为如下格式的结果：#    info &#x3D; [&#123;&#39;id&#39;:&#39;1&#39;,&#39;name&#39;:&#39;alex&#39;,&#39;age&#39;:&#39;22&#39;,&#39;phone&#39;:&#39;13651054608&#39;,&#39;job&#39;:&#39;IT&#39;&#125;,.... ..]# 提示：text的内容是根据 \n 分割（\n表示回车换行）。</code></pre><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件实现功能为，数据格式化处理。。如   text &#x3D; &quot;&quot;&quot;id,name,age,phone,job    1,alex,22,13651054608,IT    2,wusir,23,13304320533,Tearcher    3,老男孩,18,1333235322,IT&quot;&quot;&quot;输出为：info &#x3D; [&#123;&#39;id&#39;:&#39;1&#39;,&#39;name&#39;:&#39;alex&#39;,&#39;age&#39;:&#39;22&#39;,&#39;phone&#39;:&#39;13651054608&#39;,&#39;job&#39;:&#39;IT&#39;&#125;,                .... ,                ....                ]&#39;&#39;&#39;text &#x3D; &quot;&quot;&quot;id,name,age,phone,job          1,alex,22,13651054608,IT          2,wusir,23,13304320533,Tearcher          3,老男孩,18,1333235322,IT        &quot;&quot;&quot;text_list &#x3D; text.strip().split(&#39;\n&#39;)  # [&#39;id,name,age,phone,job&#39;, &#39;1,alex,22,13651054608,IT &#39;, ...]keys &#x3D; text_list[0].split(&#39;,&#39;)  # [&#39;id&#39;, &#39;name&#39;, &#39;age&#39;, &#39;phone&#39;, &#39;job&#39;]values_list &#x3D; text_list[1:]  # [&#39;1,alex,22,13651054608,IT&#39;, ...]info &#x3D; []for i in range(len(values_list)):    info.append(&#123;&#125;)    values &#x3D; values_list[i].split(&#39;,&#39;)  # [&#39;1&#39;, &#39;alex&#39;, &#39;22&#39;, &#39;13651054608&#39;, &#39;IT&#39;] ...    for j in range(len(keys)):        key &#x3D; keys[j].strip()        value &#x3D; values[j].strip()        info[i][key] &#x3D; valueprint(info)</code></pre></li><li><p>写代码实现 累乘计算器。</p><pre class="language-python" data-language="python"><code class="language-python">content &#x3D; input(&quot;请输入内容:&quot;) # 用户可能输入 5*9*99.... 或 5* 9 * 10 * 99 或 5 * 9 * 99...# 补充代码实现</code></pre><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件实现功能为，实现累乘计算器。&#39;&#39;&#39;while True:    result &#x3D; 1    content &#x3D; input(&quot;请输入内容(Q&#x2F;q退出):&quot;)  # 用户可能输入 5*9*99.... 或 5* 9 * 10 * 99 或 5 * 9 * 99...    if content.strip().upper() &#x3D;&#x3D; &#39;Q&#39;:        break    num_list &#x3D; content.split(&#39;*&#39;)  # [&#39;5&#39;, &#39; 9 &#39;, &#39; 10 &#39;, &#39; 99&#39;]    for num in num_list:        num &#x3D; int(num.strip())        result *&#x3D; num    print(result)</code></pre></li><li><p>使用for循环实现输出 9*9 乘法表</p><pre class="language-none"><code class="language-none">1*12*1 2*23*1 3*2 3*34*1 4*2 4*3 4*45*1 5*2 5*3 5*4 5*56*1 6*2 6*3 6*4 6*5 6*67*1 7*2 7*3 7*4 7*5 7*6 7*78*1 8*2 8*3 8*4 8*5 8*6 8*7 8*89*1 9*2 9*3 9*4 9*5 9*6 9*7 9*8 9*9</code></pre><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件实现功能为，for循环实现输出 9*9 乘法表。&#39;&#39;&#39;for i in range(1, 10):    for j in range(1, i+1):        print(&#39;&#123;&#125;*&#123;&#125;&#39;.format(i, j), end&#x3D;&#39; &#39;)    if i &#x3D;&#x3D; 9:        continue    print()</code></pre></li><li><p>补充代码实现《棋牌游戏11点》</p><p>需求：</p><ul><li><p>生成一副扑克牌（自己设计扑克牌的结构，小王和大王可以分别用14、15表示 ）</p></li><li><p>3个玩家</p><pre class="language-python" data-language="python"><code class="language-python">user_list &#x3D; [&quot;alex&quot;,&quot;武沛齐&quot;,&quot;李路飞&quot;]</code></pre></li><li><p>发牌规则</p><ul><li>默认先给用户发一张牌，其中 J、Q、K、小王、大王代表的值为0.5，其他就是则就是当前的牌面值。</li><li>用户根据自己的情况判断是否继续要牌。<ul><li>要，则再给他发一张。</li><li>不要，则开始给下个玩家发牌。</li></ul></li><li>如果用户手中的所有牌相加大于11，则表示爆了，此人的分数为0，并且自动开始给下个人发牌。</li></ul></li><li><p>最终计算并获得每个玩家的分值，例如：</p><pre class="language-python" data-language="python"><code class="language-python">result &#x3D; &#123;    &quot;alex&quot;:8,    &quot;武沛齐&quot;:9,    &quot;李路飞&quot;:0&#125;</code></pre></li></ul><p>必备技术点：随机抽排</p><pre class="language-python" data-language="python"><code class="language-python">import randomtotal_poke_list &#x3D; [(&quot;红桃&quot;, 1), (&quot;黑桃&quot;, 2), (&quot;大王&quot;, 15), (&quot;小王&quot;, 14)]# 随机生成一个数，当做索引。index &#x3D; random.randint(0, len(total_poke_list) - 1)# 获取牌print(&quot;抽到的牌为：&quot;, total_poke_list[index])# 踢除这张牌total_poke_list.pop(index)print(&quot;抽完之后，剩下的牌为：&quot;, total_poke_list)</code></pre><p>代码示例：（请补充实现）</p><pre class="language-python" data-language="python"><code class="language-python">result &#x3D; &#123;&#125;user_list &#x3D; [&quot;alex&quot;,&quot;武沛齐&quot;,&quot;李路飞&quot;]# 补充代码print(result)</code></pre><pre class="language-python" data-language="python"><code class="language-python">&#39;&#39;&#39;本文件实现功能为，《棋牌游戏11点》。- 生成一副扑克牌（自己设计扑克牌的结构，小王和大王可以分别用14、15表示 ）- 3个玩家  user_list &#x3D; [&quot;alex&quot;,&quot;武沛齐&quot;,&quot;李路飞&quot;]- 发牌规则  - 默认先给用户发一张牌，其中 J、Q、K、小王、大王代表的值为0.5，其他就是则就是当前的牌面值。  - 用户根据自己的情况判断是否继续要牌。    - 要，则再给他发一张。    - 不要，则开始给下个玩家发牌。  - 如果用户手中的所有牌相加大于11，则表示爆了，此人的分数为0，并且自动开始给下个人发牌。- 最终计算并获得每个玩家的分值，例如：result &#x3D; &#123;&quot;alex&quot;:8,&quot;武沛齐&quot;:9,&quot;李路飞&quot;:0&#125;&#39;&#39;&#39;import random# 1.生成一副扑克牌cards_num &#x3D; []for i in range(1, 11):    cards_num.append(str(i))cards_num.extend([&#39;J&#39;, &#39;Q&#39;, &#39;K&#39;])  # 12345678910JQKcards_col &#x3D; [&#39;♠&#39;, &#39;♥&#39;, &#39;♦&#39;, &#39;♣&#39;]cards_list &#x3D; []for color in cards_col:    for index in range(len(cards_num)):        # 将得分附到牌的后面 [&#39;♠&#39;, &#39;1&#39;, 1]        if index &gt; 9:            cards &#x3D; [color, cards_num[index], 0.5]            cards_list.append(cards)            continue        cards &#x3D; [color, cards_num[index], index + 1]        cards_list.append(cards)# 加入大小王cards_list.extend([[&#39;大&#39;, &#39;王&#39;, 0.5], [&#39;小&#39;, &#39;王&#39;, 0.5]])user_list &#x3D; [&quot;alex&quot;, &quot;武沛齐&quot;, &quot;李路飞&quot;]result &#x3D; &#123;&#125;for player in user_list:    # 每一个玩家，重置分数，打印提示语句    score &#x3D; 0    print(&#39;hello,&#123;&#125;! welcome to our game&#39;.center(50, &#39;*&#39;).format(player))    while True:        # 给该玩家发牌，打印提示，加上分数，删除该牌        draw_card &#x3D; random.sample(cards_list, 1)[0]        print(&#39;The cards you draw are:&#123;&#125;&#39;.format(draw_card[:2]))        score +&#x3D; draw_card[-1]        cards_list.remove(draw_card)        print(score)        if score &gt; 11:            score &#x3D; 0            break        # 询问是否继续        user_input &#x3D; input(&#39;do you want to continue: &#39;)        # 非法输入退出        if user_input !&#x3D; &#39;不要&#39; and user_input !&#x3D; &#39;要&#39;:            exit(&#39;input wrong&#39;)        # 输入不要结束本次循环        if user_input &#x3D;&#x3D; &#39;不要&#39;:            break        # 输入要，抽排，计算得分，去掉抽到的牌        else:            continue    result[player] &#x3D; scoreprint(result)</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 路飞学院 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 考试 </tag>
            
            <tag> 第一阶段 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算R脚本</title>
      <link href="/2022/05/01/ji-suan-r-jiao-ben/"/>
      <url>/2022/05/01/ji-suan-r-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="一、脚本介绍"><a href="#一、脚本介绍" class="headerlink" title="一、脚本介绍"></a>一、脚本介绍</h1><h2 id="amp-emsp-amp-emsp-通过1km逐月降水雨量栅格数据，计算该年降雨侵蚀因子R。"><a href="#amp-emsp-amp-emsp-通过1km逐月降水雨量栅格数据，计算该年降雨侵蚀因子R。" class="headerlink" title="&amp;emsp;&amp;emsp;通过1km逐月降水雨量栅格数据，计算该年降雨侵蚀因子R。"></a>&amp;emsp;&amp;emsp;通过1km逐月降水雨量栅格数据，计算该年降雨侵蚀因子R。</h2><h2 id="（一）计算公式"><a href="#（一）计算公式" class="headerlink" title="（一）计算公式"></a>（一）计算公式</h2><div align=center><img src="https://img-blog.csdnimg.cn/74d684baa75a48028a052f83ff4ffd60.png" width = 80%></div><h2 id="（二）数据源"><a href="#（二）数据源" class="headerlink" title="（二）数据源"></a>（二）数据源</h2><h3 id="amp-emsp-amp-emsp-国家地球系统科学数据中心-http-www-geodata-cn"><a href="#amp-emsp-amp-emsp-国家地球系统科学数据中心-http-www-geodata-cn" class="headerlink" title="&amp;emsp;&amp;emsp;国家地球系统科学数据中心(http://www.geodata.cn/)"></a>&amp;emsp;&amp;emsp;国家地球系统科学数据中心(<a href="http://www.geodata.cn/">http://www.geodata.cn/</a>)</h3><div align=center><img src="https://img-blog.csdnimg.cn/d2bf59b83f59438d87a7b283e11a8a09.png" width = 80%></div><p><font color="#dd0000">※该数据为.nc格式，需要转换成tif格式</font></p><h2 id="（三）数据输出"><a href="#（三）数据输出" class="headerlink" title="（三）数据输出"></a>（三）数据输出</h2><h3 id="1、年降雨总量栅格数据"><a href="#1、年降雨总量栅格数据" class="headerlink" title="1、年降雨总量栅格数据"></a>1、年降雨总量栅格数据</h3><h3 id="2、各月降雨侵蚀因子R"><a href="#2、各月降雨侵蚀因子R" class="headerlink" title="2、各月降雨侵蚀因子R"></a>2、各月降雨侵蚀因子R</h3><h3 id="3、年总降雨量侵蚀因子R"><a href="#3、年总降雨量侵蚀因子R" class="headerlink" title="3、年总降雨量侵蚀因子R"></a>3、年总降雨量侵蚀因子R</h3><h2 id="（四）操作过程"><a href="#（四）操作过程" class="headerlink" title="（四）操作过程"></a>（四）操作过程</h2><h3 id="1、将12各月的降雨量栅格数据输入文件夹"><a href="#1、将12各月的降雨量栅格数据输入文件夹" class="headerlink" title="1、将12各月的降雨量栅格数据输入文件夹"></a>1、将12各月的降雨量栅格数据输入文件夹</h3><h3 id="2、更改文件工作环境，运行脚本"><a href="#2、更改文件工作环境，运行脚本" class="headerlink" title="2、更改文件工作环境，运行脚本"></a>2、更改文件工作环境，运行脚本</h3><h2 id="（五）Python2源码"><a href="#（五）Python2源码" class="headerlink" title="（五）Python2源码"></a>（五）Python2源码</h2><pre class="language-python" data-language="python"><code class="language-python"># coding&#x3D;utf-8  ##Python2不支持中文# 导入模块import arcpyfrom arcpy.sa import *# 设置工作环境arcpy.env.workspace &#x3D; &quot;C:&#x2F;Users&#x2F;Geng&#x2F;Desktop&#x2F;test&#x2F;&quot;# 创建变量rasters &#x3D; arcpy.ListRasters(&quot;*&quot;, &quot;tif&quot;)  # 将工作空间中所有.tif栅格文件存入raster变量sum_pre &#x3D; 0  # 初始化年降雨量r_month &#x3D; []  # 创建空列表存储12各月的降雨量侵蚀因子rr_year &#x3D; 0  # 初始化年降雨量侵蚀因子# 计算年总降水量for raster in rasters:    print raster    sum_pre +&#x3D; Raster(raster)# 编辑公式通过降雨量计算降雨侵蚀因子rdef calculation_r(pre_mon, pre_year):    # 该公式计算出的降雨侵蚀因子有异常值(Nodata)    r_month_with_nodata &#x3D; 17.02 * (1.735 * Power(10, (1.5 * Log10(Power(pre_mon, 2)&#x2F;pre_year) - 0.8188)))    return Con(pre_mon &#x3D;&#x3D; 0, 0, r_month_with_nodata)  # 处理异常值(将Nodata 赋值为0)# 根据12个月的r，计算该年的rfor raster in rasters:    r_month.append(calculation_r(Raster(raster), sum_pre))    r_year +&#x3D; r_month[-1]    # 输出每月r    r_month[-1].save(arcpy.env.workspace + &quot;&#x2F;r_%s.tif&quot; %raster)# 输出结果r_year.save(arcpy.env.workspace + &quot;&#x2F;r_year.tif&quot;)  # 输出年尺度rsum_pre.save(arcpy.env.workspace + &quot;&#x2F;pre_year.tif&quot;)  # 输出年尺度pre</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络整理（三）</title>
      <link href="/2021/12/18/ji-suan-ji-wang-luo-zheng-li-san/"/>
      <url>/2021/12/18/ji-suan-ji-wang-luo-zheng-li-san/</url>
      
        <content type="html"><![CDATA[<h1 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a>一、思维导图</h1><ul><li>第三章 数据链路层<ul><li>3.1 数据链路层概述<ul><li>点对点信道的数据链路</li><li>使用广播信道的数据链路</li></ul></li><li>3.2 封装成帧<ul><li>封装成帧</li><li>透明传输</li><li>最大传输单元</li></ul></li><li>3.3 差错监测<ul><li>概念</li><li>奇偶校验</li><li>循环冗余校验CRC</li></ul></li><li>3.4 可靠传输<ul><li>概念</li><li>传输差错</li><li>实现机制<ul><li>停止-等待协议</li><li>回到N帧协议</li><li>选择重传协议</li></ul></li></ul></li><li>3.5 碰撞监测<ul><li>点对点协议</li><li>媒体接入控制<ul><li>基本概念</li><li>静态划分信道<ul><li>频分多址</li><li>时分多址</li><li>码分多址</li></ul></li><li>动态划分信道<ul><li>受控接入<ul><li>集中控制</li><li>分散控制</li></ul></li><li>随机接入</li></ul></li></ul></li></ul></li><li>3.6 编址问题<ul><li>MAC地址</li><li>IP地址</li><li>ARP协议</li></ul></li><li>3.7 以太网交换机<ul><li>集线器与交换机的区别</li><li>以太网交换机自学习和发送帧的过程</li><li>生成树协议STP</li></ul></li><li>3.8 虚拟局域网VLAN<ul><li>概念</li><li>实现<h1 id="二、重点"><a href="#二、重点" class="headerlink" title="二、重点"></a>二、重点</h1><h1 id="三、参考文献"><a href="#三、参考文献" class="headerlink" title="三、参考文献"></a>三、参考文献</h1><a href="https://www.bilibili.com/video/BV1c4411d7jb?share_source=copy_web">b站湖科大教书匠计算机网络视频</a></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络整理（二）</title>
      <link href="/2021/12/16/ji-suan-ji-wang-luo-zheng-li-er/"/>
      <url>/2021/12/16/ji-suan-ji-wang-luo-zheng-li-er/</url>
      
        <content type="html"><![CDATA[<h1 id="一、思维导图"><a href="#一、思维导图" class="headerlink" title="一、思维导图"></a>一、思维导图</h1><ul><li>第二章 物理层<ul><li>2.1 基本概念<ul><li>物理层所要解决的问题（重要）</li><li>物理层协议的主要任务（重要）<ul><li>机械特性</li><li>电气特性</li><li>功能特性</li><li>过程特性</li></ul></li></ul></li><li>2.2 传播媒体<ul><li>导引型传输媒体<ul><li>同轴电缆</li><li>双绞线（重要）</li><li>光纤（重要）</li><li>电力线</li></ul></li><li>非导引型传输媒体<ul><li>无线电波</li><li>微波（重要）</li><li>红外线</li><li>可见光</li></ul></li><li>无线电频谱管理机构<ul><li>中国</li><li>美国</li><li>ISM</li></ul></li></ul></li><li>2.3 传播方式<ul><li>串行传输和并行传输（重要）</li><li>同步传输和异步传输（重要）</li><li>单工、半双工和全双工</li></ul></li><li>2.4 编码和调整<ul><li>数据通信中的常用术语<ul><li>消息</li><li>数据</li><li>信号（基带信号）<ul><li>数字基带信号</li><li>模拟基带信号</li></ul></li></ul></li><li>编码（重要）<ul><li>将数字信号转换为另一种数字信号在数字信道中传播</li><li>将模拟信号转换为数字信号在数字信道中传播</li><li>常见的编码方式<ul><li>不归零编码</li><li>归零编码</li><li>曼彻斯特编码和差分曼彻斯特编码</li></ul></li></ul></li><li>调制（重要）<ul><li>将数字信号转化为模拟信号在模拟信道中传播</li><li>将模拟信号转化为另一模拟信号在模拟信道中传播</li><li>基本调制</li><li>混合调制</li></ul></li><li>码元（重要）</li></ul></li><li>2.5 信道的极限容量（重要）<ul><li>造成信号失真的因素<ul><li>码元传输速率</li><li>信号传输距离</li><li>噪声干扰</li><li>传播媒体质量</li></ul></li><li>奈氏准则</li><li>香农公式</li><li>奈氏准则和香农公式的作用</li></ul></li></ul></li></ul><h1 id="二、重点"><a href="#二、重点" class="headerlink" title="二、重点"></a>二、重点</h1><h2 id="（一）物理层所要解决的问题"><a href="#（一）物理层所要解决的问题" class="headerlink" title="（一）物理层所要解决的问题"></a>（一）物理层所要解决的问题</h2><pre><code>    物理层考虑的是怎样才能在连接各种计算机的**传输媒体上传输数据比特流**。    它为数据链路层**屏蔽了各种传输媒体的差异**，使数据链路层只需要考虑如何完成本层协议和服务，而不必考虑网络具体的传输媒体是什么。</code></pre><h2 id="（二）物理层协议的主要任务"><a href="#（二）物理层协议的主要任务" class="headerlink" title="（二）物理层协议的主要任务"></a>（二）物理层协议的主要任务</h2><h3 id="1、机械特性"><a href="#1、机械特性" class="headerlink" title="1、机械特性"></a>1、机械特性</h3><pre><code>    指定接口所用**接线器形状和尺寸**、**引脚数目和排列**、**固定**和**锁定**装置。</code></pre><h3 id="2、电气特性"><a href="#2、电气特性" class="headerlink" title="2、电气特性"></a>2、电气特性</h3><pre><code>    指明在接口电缆出现的各条线上出现的**电压范围**。</code></pre><h3 id="3、功能特性"><a href="#3、功能特性" class="headerlink" title="3、功能特性"></a>3、功能特性</h3><pre><code>    指定某条线上的**某一电平的电压表示何种意义**。</code></pre><h3 id="4、过程特性"><a href="#4、过程特性" class="headerlink" title="4、过程特性"></a>4、过程特性</h3><pre><code>    指明对于不同功能的各种可能**事件的出现顺序**。</code></pre><h2 id="（三）传播媒体"><a href="#（三）传播媒体" class="headerlink" title="（三）传播媒体"></a>（三）传播媒体</h2><h3 id="1、双绞线绞和的目的"><a href="#1、双绞线绞和的目的" class="headerlink" title="1、双绞线绞和的目的"></a>1、双绞线绞和的目的</h3><p>（1）抵御部分来自<strong>外界</strong>的<strong>电磁干扰</strong>。<br>（2）减少<strong>相邻导线</strong>的<strong>电磁干扰</strong>。</p><h3 id="2、光在光纤中传播的原理"><a href="#2、光在光纤中传播的原理" class="headerlink" title="2、光在光纤中传播的原理"></a>2、光在光纤中传播的原理</h3><pre><code>    纤芯：非常透明的石英玻璃拉成细丝（直径8~100um）。    包层：折射率比纤芯低的玻璃封套（直径125um）。    发送端：发光二极管、半导体激光器作为光源。    接收端：光电二极管、激光检波器检测光脉冲。    光纤：当光从高折射率的媒体射向低折射率的媒体时，折射角将大于入射角，因此只要入射角足够大时，就会发生全反射，即光遇到包层时就会反射回纤芯，光也就沿着光纤传输下去。    多模光纤：只要入射角大于某一临街角度，就可产生全反射。也就可以存在许多条不同入射角的</code></pre><p>光线，在一条光纤中传输。由于色散，多模光纤存在脉冲展宽的问题，只适合近距离传输（建筑物<br>内）。<br>        单模光纤：光在纤芯中一直向前传播而不发生全反射。没有脉冲展宽问题，适合长距离传输，成<br>本高、对光源要求高。</p><h2 id="（四）串行传输和并行传输"><a href="#（四）串行传输和并行传输" class="headerlink" title="（四）串行传输和并行传输"></a>（四）串行传输和并行传输</h2><p>1、串行传输<br>        <strong>比特一个接一个</strong>的在<strong>一根传输线</strong>上传输，适合<strong>远距离</strong>传输，<strong>计算机网络</strong>采用这种传输。<br>2、并行传输<br>        多个比特同时在多根传输线上传输，成本高。应用于计算机内部的数据传输。（例如：CPU和内存之间通过总线进行传输）</p><h2 id="（五）同步传输和异步传输"><a href="#（五）同步传输和异步传输" class="headerlink" title="（五）同步传输和异步传输"></a>（五）同步传输和异步传输</h2><p>1、同步传输<br>        <strong>比特</strong>一个接一个传输，中间<strong>没有间隔</strong>，各比特<strong>持续时长相等</strong>，要保证收发双方<strong>时钟同步</strong>。主要方法有。<br>（1）外同步：在收发双发之间<strong>增加</strong>一条单独的<strong>时钟信号线</strong>。<br>（2）内同步：发送方将<strong>时钟信号编码到数据</strong>中一起发送。<br>2、异步传输<br>        以<strong>字节为</strong>单位进行传输，字节间<strong>间隔不固定</strong>，但字节内每个<strong>比特持续时间相同</strong>（<strong>字节异步，比特同步</strong>）。为此需要给每个字节<strong>添加起始位和结束位</strong>，方便接收端接受。</p><h2 id="（六）编码"><a href="#（六）编码" class="headerlink" title="（六）编码"></a>（六）编码</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p>（1）将数据信号转换为另一种数据信号，在数字信道上传输。<br>例如：因特网曼切斯特编码、4B&#x2F;8B、8B&#x2F;10B。<br>（2）将模拟信号转换为数字信号，在数字信道中传输。<br>例如：对音频信号进行编码的脉码调制（PCM, Pulse Code Modulation）。</p><h3 id="2、几种常见的编码"><a href="#2、几种常见的编码" class="headerlink" title="2、几种常见的编码"></a>2、几种常见的编码</h3><p>（1）不归零编码<br><img src="https://img-blog.csdnimg.cn/1133270aff6c4522a398461dc668b2ca.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（2）归零编码<br><img src="https://img-blog.csdnimg.cn/86540d0a0da14a6f8d24264b5970bbe7.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>（3）曼切斯特编码和差分曼切斯特编码<br><img src="https://img-blog.csdnimg.cn/bbb6d692b7914a66b68832b11e0714e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="（七）调制"><a href="#（七）调制" class="headerlink" title="（七）调制"></a>（七）调制</h2><h3 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h3><p>（1）将数字信号转换成模拟信号，在模拟信道中传输。<br>例如：WiFi采用补码检控、直接序列扩频、正交频分复用等技术。<br>（2）将模拟信号转换为另一种模拟信号，在模拟信道中传输。<br>例如：语音信号加载到模拟的载波信号中进行传输。</p><h3 id="2、基本调制"><a href="#2、基本调制" class="headerlink" title="2、基本调制"></a>2、基本调制</h3><p><img src="https://img-blog.csdnimg.cn/6b9eec3428b64bdcb3039887024e72fc.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h3 id="3、混合调制"><a href="#3、混合调制" class="headerlink" title="3、混合调制"></a>3、混合调制</h3><p><img src="https://img-blog.csdnimg.cn/70a5a67f04fa4a949d00961585c05cf1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="（八）码元"><a href="#（八）码元" class="headerlink" title="（八）码元"></a>（八）码元</h2><p>&amp;emsp;&amp;emsp;在使用时间域的波型表示数字信号时，代表<strong>不同离散数值的基本波型</strong>。</p><h2 id="（九）造成信号失真的原因"><a href="#（九）造成信号失真的原因" class="headerlink" title="（九）造成信号失真的原因"></a>（九）造成信号失真的原因</h2><p>1、码元传输速率<br>2、信号传输距离<br>3、噪声干扰<br>4、传输媒体质量</p><h2 id="（十）奈氏准则"><a href="#（十）奈氏准则" class="headerlink" title="（十）奈氏准则"></a>（十）奈氏准则</h2><p><img src="https://img-blog.csdnimg.cn/b921b0e682644480aafd76c2999924f8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="（十一）香农公式"><a href="#（十一）香农公式" class="headerlink" title="（十一）香农公式"></a>（十一）香农公式</h2><p><img src="https://img-blog.csdnimg.cn/eea23f5b1b7545139352fd8b0a7ce58e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><h2 id="（十二）奈氏准则和香农公式的意义"><a href="#（十二）奈氏准则和香农公式的意义" class="headerlink" title="（十二）奈氏准则和香农公式的意义"></a>（十二）奈氏准则和香农公式的意义</h2><p>1、在信道<strong>带宽一定</strong>的前提现，根据奈氏准则和香农公式，想要提高<strong>信息传输的效率</strong>，就必须采用<strong>多元制</strong>（更好的调整方法），和努力<strong>提高</strong>信道中的<strong>信噪比</strong>。<br>2、自从香农公式发表后，各种新的<strong>信号处理和调制方式</strong>就不断出现，目的就是为了接近<strong>香农公式给出的信道传输速率的极限</strong>。</p><h1 id="三、参考文献"><a href="#三、参考文献" class="headerlink" title="三、参考文献"></a>三、参考文献</h1><ol><li><a href="https://www.bilibili.com/video/BV1c4411d7jb?share_source=copy_web">b站湖科大教书匠计算机网络视频</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络整理（一）</title>
      <link href="/2021/12/16/ji-suan-ji-wang-luo-zheng-li-yi/"/>
      <url>/2021/12/16/ji-suan-ji-wang-luo-zheng-li-yi/</url>
      
        <content type="html"><![CDATA[<h1 id="一、重点"><a href="#一、重点" class="headerlink" title="一、重点"></a>一、重点</h1><h2 id="（一）网络、互联网、因特网的概念"><a href="#（一）网络、互联网、因特网的概念" class="headerlink" title="（一）网络、互联网、因特网的概念"></a>（一）网络、互联网、因特网的概念</h2><p>1、网络（Network）<br>        由若干<font color="#dd0000">结点（Node）</font>和连接这些结点的<font color="#dd0000">链路（Link）</font>组成。<br>2、互联网（internet）<br>        多个网络可以通过路由器互连起来，形成一个覆盖范围更大的网络，及互联网，因此互联网是<font color="#dd0000">网络的网络</font>。<br>3、因特网（Internet）<br>        是世界上<font color="#dd0000">最大的互连网络</font>（用户数以亿计，互连的网络数以百万计）。</p><h2 id="（二）分组交换"><a href="#（二）分组交换" class="headerlink" title="（二）分组交换"></a>（二）分组交换</h2><p>​将报文分成若干个<font color="#dd0000">等长的报文段</font>，然后将各数据添加首部（包含重要的控件信息），构成分组。<font color="#dd0000">节点交换机（路由器）</font>对分组进行存储转发，分组从源主机到目的主机可走不同的路径。</p><h2 id="（三）计算机网络的分类"><a href="#（三）计算机网络的分类" class="headerlink" title="（三）计算机网络的分类"></a>（三）计算机网络的分类</h2><h3 id="1、按交换技术"><a href="#1、按交换技术" class="headerlink" title="1、按交换技术"></a>1、按交换技术</h3><p>电路交换网、报文交换网、分组交换网</p><h3 id="2、按使用者"><a href="#2、按使用者" class="headerlink" title="2、按使用者"></a>2、按使用者</h3><p>公用网、专用网</p><h3 id="3、安传输介质"><a href="#3、安传输介质" class="headerlink" title="3、安传输介质"></a>3、安传输介质</h3><p>有线网、无线网</p><h3 id="4、按覆盖范围"><a href="#4、按覆盖范围" class="headerlink" title="4、按覆盖范围"></a>4、按覆盖范围</h3><p>广域网（WAN）、城域网(MAN)、局域网(LAN)、个域网(PAN)</p><h3 id="5、按拓扑结构"><a href="#5、按拓扑结构" class="headerlink" title="5、按拓扑结构"></a>5、按拓扑结构</h3><p>总线型网络、星型网络、环形网络、网状网络</p><h2 id="（四）带宽"><a href="#（四）带宽" class="headerlink" title="（四）带宽"></a>（四）带宽</h2><pre><code>    用来表示网络通信线路所能传送数据的能力，也就是&lt;font color=&quot;#dd0000&quot;&gt;最高数据率&lt;/font&gt;。</code></pre><h2 id="（五）时延"><a href="#（五）时延" class="headerlink" title="（五）时延"></a>（五）时延</h2><h3 id="1、发送时延"><a href="#1、发送时延" class="headerlink" title="1、发送时延"></a>1、发送时延</h3><pre><code>    分组长度（b）/发送速率（b/s）</code></pre><h3 id="2、传播时延"><a href="#2、传播时延" class="headerlink" title="2、传播时延"></a>2、传播时延</h3><pre><code>    信道长度（m）/电磁波传播速率（m/s）    电磁波传播速率：</code></pre><p>自由空间：3*$10^8$m&#x2F;s<br>铜线：2.3*$10^8$m&#x2F;s<br>光纤：2*$10^8$m&#x2F;s</p><h3 id="3、处理时延"><a href="#3、处理时延" class="headerlink" title="3、处理时延"></a>3、处理时延</h3><pre><code>    不方便计算，忽略。</code></pre><h2 id="（六）利用率"><a href="#（六）利用率" class="headerlink" title="（六）利用率"></a>（六）利用率</h2><p><img src="https://img-blog.csdnimg.cn/fd679280fe1f465e9b524c5a373891a8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6IC_5aSp6Zy4,size_20,color_FFFFFF,t_70,g_se,x_16"></p><h2 id="（七）分层的必要性"><a href="#（七）分层的必要性" class="headerlink" title="（七）分层的必要性"></a>（七）分层的必要性</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><pre><code>    计算机网络是非常复杂的系统,“分层”可以将&lt;font color=&quot;#dd0000&quot;&gt;庞大而复杂&lt;/font&gt;的问题，转化成若干&lt;font color=&quot;#dd0000&quot;&gt;弱小的局部问题&lt;/font&gt;。</code></pre><h3 id="2、以五层原理体系结构为例，说明分层的必要性"><a href="#2、以五层原理体系结构为例，说明分层的必要性" class="headerlink" title="2、以五层原理体系结构为例，说明分层的必要性"></a>2、以五层原理体系结构为例，说明分层的必要性</h3><p>物理层：解决使用<font color="#dd0000">何种信号传输比特</font>的问题。<br>数据链路层：解决<font color="#dd0000">分组在一个网络（或一段链路）</font>上的传输问题。<br>网络层：解决<font color="#dd0000">分组在多个网络</font>间传输（路由）的问题。<br>运输层：解决<font color="#dd0000">进程之间基于网络的通信</font>问题。<br>应用层：解决<font color="#dd0000">应用进程间的交互来实现特定网络应用</font>的问题。</p><h2 id="（八）常见的计算机网络体系结构"><a href="#（八）常见的计算机网络体系结构" class="headerlink" title="（八）常见的计算机网络体系结构"></a>（八）常见的计算机网络体系结构</h2><h3 id="1、osi七层体系结构"><a href="#1、osi七层体系结构" class="headerlink" title="1、osi七层体系结构"></a>1、osi七层体系结构</h3><pre><code>    法律上的国际标准：物理层、数据链路层、网络层、传输层、对话层、表示层、应用层。</code></pre><h3 id="2、TCP-x2F-IP的四层体系结构"><a href="#2、TCP-x2F-IP的四层体系结构" class="headerlink" title="2、TCP&#x2F;IP的四层体系结构"></a>2、TCP&#x2F;IP的四层体系结构</h3><pre><code>    实际上的国际标准：网络接口层、网际层、传输层、应用层。</code></pre><h3 id="3、五层协议的原理体系结构"><a href="#3、五层协议的原理体系结构" class="headerlink" title="3、五层协议的原理体系结构"></a>3、五层协议的原理体系结构</h3><pre><code>    便于教学：物理层、数据链路层、网络层、传输层、应用层。</code></pre><h2 id="（九）分层思想举例"><a href="#（九）分层思想举例" class="headerlink" title="（九）分层思想举例"></a>（九）分层思想举例</h2><pre><code>    通过浏览器进程与Web服务器进程的交互实例，演示分组逐层封装和解封的过程视频（P9）。</code></pre><h2 id="（十）专用术语"><a href="#（十）专用术语" class="headerlink" title="（十）专用术语"></a>（十）专用术语</h2><h3 id="1、实体"><a href="#1、实体" class="headerlink" title="1、实体"></a>1、实体</h3><pre><code>    实体是指任何可&lt;font color=&quot;#dd0000&quot;&gt;发送或接受信息的硬件或软件&lt;/font&gt;进程。    &lt;font color=&quot;#dd0000&quot;&gt;对等实体&lt;/font&gt;是指通信双方相同层次中的实体。</code></pre><h3 id="2、协议"><a href="#2、协议" class="headerlink" title="2、协议"></a>2、协议</h3><p>（1）概念<br>        <font color="#dd0000">协议</font>是指控制两个对等实体进行逻辑通信的规则的集合。<br>（2）<font color="#dd0000">协议的三要</font>素是语法、语义、同步。<br>        <font color="#dd0000">语法</font>定义所交换信息的格式。例如：ip数据报的格式<br>        <font color="#dd0000">语义</font>定义通信双方所要完成的操作。例如：主机发送HTTP的GET请求给Web服务器，Web服务器收到后执行相应的操作，然后给主机发回HTTP响应。<br>        <font color="#dd0000">同步</font>定义通信双方的时序关系。例如：TCP的“三报文握手”建立连接的过程。<br>（3）<font color="#dd0000">协议数据单元</font><br>        对等层次之间传输的数据包成为该层的协议数据单元PDU。<br>        应用层：报文（message）<br>        运输层：TCP报文段（segment）或UDP用户数据报（datagram）<br>        网络层：分组（packet）或IP数据报<br>        数据链路层：帧（frame）<br>        物理层：比特流（bit stram）</p><h3 id="3、服务"><a href="#3、服务" class="headerlink" title="3、服务"></a>3、服务</h3><p>（1）概念<br>        在协议的控制下，两个对等实体之间的逻辑通信使得本层能够向上一层提供服务。要实现本层协议，还需要使用下一层所提供的服务。<font color="#dd0000">协议是水平的，服务是垂直</font>的。实体看得见相邻下层提供的服务，但并不知道实现该服务的具体协议。也就是说下面的协议对上面的实体是<font color="#dd0000">“透明”</font>的。<br>（2）<font color="#dd0000">服务访问点</font>是指在同一系统中，<font color="#dd0000">相邻两个实体交换信息的逻辑接口</font>，用于区分不同的服务类型。<br>        数据链路层的服务访问点为帧的“类型”字段。<br>        网络层的服务访问点为IP数据报首部中的“协议字段”。<br>        运输层的服务访问点为“窗口号”。<br>(3)<font color="#dd0000">服务原语</font>是指上层使用下层所提供的服务必须通过与下层交换的一些命令。<br>(4)<font color="#dd0000">服务数据单元</font>SDU是指统一系统内，层与层之间交换的数据包。多个SDU可以合成为一个PDU；一个SUP也可以划分为多个PDU。</p><h1 id="二、参考文献"><a href="#二、参考文献" class="headerlink" title="二、参考文献"></a>二、参考文献</h1><p><a href="https://www.bilibili.com/video/BV1c4411d7jb?share_source=copy_web">b站湖科大教书匠计算机网络视频</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
